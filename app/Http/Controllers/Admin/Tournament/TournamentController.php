<?php

namespace App\Http\Controllers\Admin\Tournament;

use App\Http\Controllers\Controller;
use App\Http\Requests\Admin\Tournament\TournamentRequest;
use App\Http\Requests\Admin\UpdateActivityRequest;
use App\Http\Requests\Admin\UpdateSortEntityRequest;
use App\Http\Resources\Admin\Tournament\TournamentResource;
use App\Http\Resources\Admin\Tournament\TournamentSharedResource;
use App\Models\Admin\Athlete\Athlete;
use App\Models\Admin\Tournament\Tournament;
use App\Models\Admin\Tournament\TournamentImage;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Inertia\Inertia;
use Inertia\Response;
use Throwable;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¢—É—Ä–Ω–∏—Ä–∞–º–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.
 *
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ –∏ –º–∞—Å—Å–æ–≤–æ–µ)
 *
 * @version 1.1 (–£–ª—É—á—à–µ–Ω —Å RMB, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏, Form Requests)
 * @author –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–æ—Å–æ–ª–∞–ø–æ–≤ <kosolapov1976@gmail.com>
 * @see \App\Models\Admin\Tournament\Tournament –ú–æ–¥–µ–ª—å –°–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
 * @see \App\Http\Requests\Admin\Tournament\TournamentRequest –ó–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
class TournamentController extends Controller
{
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¢—É—Ä–Ω–∏—Ä–æ–≤.
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.
     * –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
     * –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ.
     *
     * GET /admin/tournaments
     * @return Response
     */
    public function index(): Response
    {
        // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ $this->authorize('view-tournament', Tournament::class);

        $adminCountTournaments = config('site_settings.AdminCountTournaments', 15);
        $adminSortTournaments = config('site_settings.AdminSortTournaments', 'idDesc');

        try {
            $tournaments = Tournament::with([
                'fighterRed',
                'fighterBlue',
                'winner',
                'images' => fn($q) => $q->orderBy('order')
            ])->orderBy('sort')->orderByDesc('id')->get();

            $tournamentsCount = $tournaments->count();

        } catch (Throwable $e) {
            Log::error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {$e->getMessage()}");
            $tournaments = collect();
            $tournamentsCount = 0;
            session()->flash('error', __('admin/controllers/tournaments.index_error'));
        }

        return Inertia::render('Admin/Tournaments/Index', [
            'tournaments' => TournamentResource::collection($tournaments),
            'tournamentsCount' => $tournamentsCount,
            'adminCountTournaments' => (int)$adminCountTournaments,
            'adminSortTournaments' => $adminSortTournaments,
        ]);
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.
     *
     *  GET /admin/tournaments/create
     * @return Response
     */
    public function create(): Response
    {
        $athletes = Athlete::select('id', 'nickname', 'avatar')
            ->orderBy('nickname')
            ->get();

        return Inertia::render('Admin/Tournaments/Create', [
            'athletes' => $athletes,
        ]);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TournamentRequest –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     *
     *  POST /admin/tournaments
     * @param TournamentRequest $request
     * @return RedirectResponse –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     */
    public function store(TournamentRequest $request): RedirectResponse
    {
        $data = $request->validated();
        // Log::debug('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞', ['validated' => $data]);

        $imagesData = $data['images'] ?? [];
        unset($data['images']);

        DB::beginTransaction();
        try {
            $tournament = Tournament::create($data);

            if (!$tournament || !$tournament->exists) {
                Log::error('‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω!', ['data' => $data]);
                throw new \Exception('–ú–æ–¥–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞');
            }

            // Log::debug('‚úÖ –°–ø–æ—Ä—Ç—Å–º–µ–Ω —Å–æ–∑–¥–∞–Ω', ['id' => $tournament->id, 'nickname' => $tournament->nickname]);

            $imageSyncData = [];
            $imageIndex = 0;

            foreach ($imagesData as $imageData) {
                $fileKey = "images.{$imageIndex}.file";
                // Log::debug('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', ['index' => $imageIndex, 'data' => $imageData]);

                if ($request->hasFile($fileKey)) {
                    $image = TournamentImage::create([
                        'order'   => $imageData['order']   ?? 0,
                        'alt'     => $imageData['alt']     ?? '',
                        'caption' => $imageData['caption'] ?? '',
                    ]);

                    try {
                        $file = $request->file($fileKey);

                        if ($file->isValid()) {
                            $image->addMedia($file)->toMediaCollection('images');
                            $imageSyncData[$image->id] = ['order' => $image->order];
                            // Log::debug('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–µ–¥–∏–∞—Ç–µ–∫—É', ['image_id' => $image->id]);
                        } else {
                            Log::warning("‚ö†Ô∏è –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–µ–Ω", [
                                'index' => $imageIndex,
                                'fileKey' => $fileKey,
                                'error' => $file->getErrorMessage()
                            ]);
                            $image->delete();
                        }
                    } catch (Throwable $e) {
                        Log::error("‚ùó –û—à–∏–±–∫–∞ Spatie –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", [
                            'index' => $imageIndex,
                            'message' => $e->getMessage()
                        ]);
                        $image->delete();
                    }
                }

                $imageIndex++;
            }

            $tournament->images()->sync($imageSyncData);
            DB::commit();

            // Log::info('üèÅ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', ['id' => $tournament->id]);
            return redirect()->route('admin.tournaments.index')->with('success', __('admin/controllers/tournaments.created'));

        } catch (Throwable $e) {
            DB::rollBack();
            Log::error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞", [
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return back()->withInput()->withErrors(['general' => __('admin/controllers/tournaments.create_error')]);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Route Model Binding –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.
     *
     *  GET /admin/tournaments/{tournament}/edit
     * @param Tournament $tournament –ú–æ–¥–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞, –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ ID –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞.
     * @return Response
     */
    public function edit(Tournament $tournament): Response
    {
        // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ $this->authorize('update-tournaments', $tournament);

        $tournament->load([
            'images' => fn($q) => $q->orderBy('order'),
            'fighterRed', 'fighterBlue', 'winner'
        ]);

        $athletes = Athlete::select('id', 'nickname', 'avatar')->orderBy('nickname')->get();

        return Inertia::render('Admin/Tournaments/Edit', [
            'tournament' => new TournamentResource($tournament),
            'athletes' => $athletes,
        ]);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TournamentRequest –∏ Route Model Binding.
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã.
     *
     *  PUT /admin/tournaments/{tournament}
     *  PATCH /admin/tournaments/{tournament}
     * @param TournamentRequest $request –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
     * @param Tournament $tournament –ú–æ–¥–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     * @return RedirectResponse –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     */
    public function update(TournamentRequest $request, Tournament $tournament): RedirectResponse
    {
        $data = $request->validated();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        $imagesData       = $data['images'] ?? [];
        $deletedImageIds  = $data['deletedImages'] ?? [];

        // –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ $data
        unset(
            $data['images'],
            $data['deletedImages'],
            $data['_method']
        );

        try {
            DB::beginTransaction();

            // 1) –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (!empty($deletedImageIds)) {
                // –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –æ—Ç pivot
                $tournament->images()->detach($deletedImageIds);
                // —É–¥–∞–ª—è–µ–º —Å–∞–º–∏ –∑–∞–ø–∏—Å–∏ –∏ —Ñ–∞–π–ª—ã
                $this->deleteImages($deletedImageIds);
            }

            // 2) –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            $tournament->update($data);

            // 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            $syncData = [];
            foreach ($imagesData as $index => $imageData) {
                $fileKey = "images.{$index}.file";

                // a) –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if (!empty($imageData['id'])) {
                    $img = TournamentImage::find($imageData['id']);

                    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è
                    if ($img && !in_array($img->id, $deletedImageIds, true)) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º order, alt, caption
                        $img->update([
                            'order'   => $imageData['order']   ?? $img->order,
                            'alt'     => $imageData['alt']     ?? $img->alt,
                            'caption' => $imageData['caption'] ?? $img->caption,
                        ]);

                        // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –Ω–æ–≤—ã–π —Ñ–∞–π–ª ‚Äî –º–µ–Ω—è–µ–º –º–µ–¥–∏–∞
                        if ($request->hasFile($fileKey)) {
                            $img->clearMediaCollection('images');
                            $img->addMedia($request->file($fileKey))
                                ->toMediaCollection('images');
                        }

                        // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è pivot sync
                        $syncData[$img->id] = ['order' => $img->order];
                    }

                    // b) –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ—Ç ID, –Ω–æ –µ—Å—Ç—å —Ñ–∞–π–ª)
                } elseif ($request->hasFile($fileKey)) {
                    $new = TournamentImage::create([
                        'order'   => $imageData['order']   ?? 0,
                        'alt'     => $imageData['alt']     ?? '',
                        'caption' => $imageData['caption'] ?? '',
                    ]);

                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                    $new->addMedia($request->file($fileKey))
                        ->toMediaCollection('images');

                    $syncData[$new->id] = ['order' => $new->order];
                }
            }

            // 5) –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏ –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ pivot
            $tournament->images()->sync($syncData);

            DB::commit();

            Log::info('–¢—É—Ä–Ω–∏—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: ', ['id' => $tournament->id, 'title' => $tournament->nickname]);
            return redirect()->route('admin.tournaments.index')->with('success', __('admin/controllers/tournaments.updated'));

        } catch (Throwable $e) {
            DB::rollBack();
            Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ID {$tournament->id}: {$e->getMessage()}", [
                'trace' => $e->getTraceAsString(),
            ]);
            return back()->withInput()->withErrors(['general' => __('admin/controllers/tournaments.update_error')]);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Route Model Binding. –°–≤—è–∑–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ.
     *
     *  DELETE /admin/tournaments/{tournament}
     * @param Tournament $tournament –ú–æ–¥–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
     * @return RedirectResponse –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     */
    public function destroy(Tournament $tournament): RedirectResponse
    {
        try {
            DB::beginTransaction();
            $this->deleteImages($tournament->images()->pluck('id')->toArray());
            $tournament->delete();
            DB::commit();

            return redirect()->route('admin.tournaments.index')
                ->with('success', __('admin/controllers/tournaments.deleted'));
        } catch (Throwable $e) {
            DB::rollBack();
            Log::error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {$e->getMessage()}");
            return back()->withErrors(['general' => __('admin/controllers/tournaments.delete_error')]);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—É—Ä–Ω–∏—Ä–∞.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Route Model Binding –∏ UpdateActivityRequest.
     *
     * @param UpdateActivityRequest $request –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª–µ–º 'activity'.
     * @param Tournament $tournament –ú–æ–¥–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     * @return RedirectResponse –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞–∑–∞–¥ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     */
    public function updateActivity(UpdateActivityRequest $request, Tournament $tournament): RedirectResponse
    {
        $validated = $request->validated();

        try {
            $tournament->activity = $validated['activity'];
            $tournament->save();

            $action = $tournament->activity ? __('admin/controllers/common.activated')
                : __('admin/controllers/common.deactivated');

            return back()->with('success', __('admin/controllers/tournaments.activity', [
                'title' => $tournament->name,
                'action' => $action,
            ]));
        } catch (Throwable $e) {
            Log::error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ID {$tournament->id}: {$e->getMessage()}");
            return back()->withErrors(['general' => __('admin/controllers/tournaments.update_activity_error')]);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—Å—Å–æ–≤–æ
     *
     * @param Request $request
     * @return JsonResponse Json –æ—Ç–≤–µ—Ç
     */
    public function bulkUpdateActivity(Request $request): JsonResponse
    {
        // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ $this->authorize('update-tournaments', Tournament::class);
        $data = $request->validate([
            'ids'      => 'required|array',
            'ids.*'    => 'required|integer|exists:tournaments,id',
            'activity' => 'required|boolean',
        ]);

        Tournament::whereIn('id', $data['ids'])->update(['activity' => $data['activity']]);

        return response()->json(['success' => true]);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Route Model Binding –∏ UpdateSortEntityRequest.
     *
     * @param UpdateSortEntityRequest $request –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª–µ–º 'sort'.
     * @param Tournament $tournament –ú–æ–¥–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     * @return RedirectResponse –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞–∑–∞–¥ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º..
     */
    public function updateSort(UpdateSortEntityRequest $request, Tournament $tournament): RedirectResponse
    {
        $validated = $request->validated();

        try {
            $tournament->sort = $validated['sort'];
            $tournament->save();
            return back();
        } catch (Throwable $e) {
            Log::error("–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ ID {$tournament->id}: {$e->getMessage()}");
            return back()->withErrors(['sort' => __('admin/controllers/tournaments.update_sort_error')]);
        }
    }

    /**
     * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ ID.
     * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–∏–¥–∞ `[{id: 1, sort: 10}, {id: 5, sort: 20}]`.
     *
     * @param Request $request –ó–∞–ø—Ä–æ—Å —Å –º–∞—Å—Å–∏–≤–æ–º 'tournaments'.
     * @return RedirectResponse –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞–∑–∞–¥ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
     */
    public function updateSortBulk(Request $request): RedirectResponse
    {
        // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ $this->authorize('update-tournaments');

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –º–∞—Å—Å–∏–≤ (–ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π FormRequest: UpdateSortBulkRequest)
        $validated = $request->validate([
            'tournaments' => 'required|array',
            'tournaments.*.id' => ['required', 'integer', 'exists:tournaments,id'],
            'tournaments.*.sort' => ['required', 'integer', 'min:1'],
        ]);

        try {
            DB::beginTransaction();
            foreach ($validated['tournaments'] as $tournamentData) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º update –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–ª–∏ where/update
                Tournament::where('id', $tournamentData['id'])->update(['sort' => $tournamentData['sort']]);
            }
            DB::commit();

            Log::info('–ú–∞—Å—Å–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤', ['count' => count($validated['tournaments'])]);
            return back();

        } catch (Throwable $e) {
            DB::rollBack();
            Log::error("–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: " . $e->getMessage());
            return back()->withErrors(['general' => __('admin/controllers/tournaments.bulk_update_sort_error')]);
        }
    }

    private function syncImages(Request $request, Tournament $tournament, array $images): void
    {
        $syncData = [];

        foreach ($images as $index => $imageData) {
            $fileKey = "images.{$index}.file";

            if (!empty($imageData['id'])) {
                $image = TournamentImage::find($imageData['id']);

                if ($image && $request->hasFile($fileKey)) {
                    $image->clearMediaCollection('images');
                    $image->addMedia($request->file($fileKey))
                        ->toMediaCollection('images');
                }

                $image?->update([
                    'order' => $imageData['order'] ?? $image->order,
                    'alt' => $imageData['alt'] ?? $image->alt,
                    'caption' => $imageData['caption'] ?? $image->caption,
                ]);

                $syncData[$image->id] = ['order' => $image->order];

            } elseif ($request->hasFile($fileKey)) {
                $image = TournamentImage::create([
                    'order' => $imageData['order'] ?? 0,
                    'alt' => $imageData['alt'] ?? '',
                    'caption' => $imageData['caption'] ?? '',
                ]);
                $image->addMedia($request->file($fileKey))
                    ->toMediaCollection('images');

                $syncData[$image->id] = ['order' => $image->order];
            }
        }

        $tournament->images()->sync($syncData);
    }

    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–ª—è Spatie)
     *
     * @param array $imageIds
     * @return void
     */
    private function deleteImages(array $imageIds): void
    {
        $images = TournamentImage::whereIn('id', $imageIds)->get();
        foreach ($images as $image) {
            $image->clearMediaCollection('images');
            $image->delete();
        }
    }
}
